#![allow(non_camel_case_types, non_upper_case_globals, dead_code)]
/* automatically generated by rust-bindgen 0.58.1 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::std::mem::transmute(self)
    }
}
impl<T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
pub const _GLIBCXX_CSTDINT: u32 = 1;
pub const _GLIBCXX_CXX_CONFIG_H: u32 = 1;
pub const _GLIBCXX_RELEASE: u32 = 10;
pub const __GLIBCXX__: u32 = 20210110;
pub const _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY: u32 = 1;
pub const _GLIBCXX_USE_DEPRECATED: u32 = 1;
pub const _GLIBCXX_EXTERN_TEMPLATE: u32 = 1;
pub const _GLIBCXX_USE_DUAL_ABI: u32 = 1;
pub const _GLIBCXX_USE_CXX11_ABI: u32 = 1;
pub const _GLIBCXX_INLINE_VERSION: u32 = 0;
pub const _GLIBCXX_USE_ALLOCATOR_NEW: u32 = 1;
pub const _GLIBCXX_OS_DEFINES: u32 = 1;
pub const __NO_CTYPE: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _ISOC95_SOURCE: u32 = 1;
pub const _ISOC99_SOURCE: u32 = 1;
pub const _ISOC11_SOURCE: u32 = 1;
pub const _ISOC2X_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _XOPEN_SOURCE: u32 = 700;
pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
pub const _LARGEFILE64_SOURCE: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_ISOCXX11: u32 = 1;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const __USE_XOPEN: u32 = 1;
pub const __USE_XOPEN_EXTENDED: u32 = 1;
pub const __USE_UNIX98: u32 = 1;
pub const _LARGEFILE_SOURCE: u32 = 1;
pub const __USE_XOPEN2K8XSI: u32 = 1;
pub const __USE_XOPEN2KXSI: u32 = 1;
pub const __USE_LARGEFILE: u32 = 1;
pub const __USE_LARGEFILE64: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_GNU: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 31;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LONG_DOUBLE_USES_FLOAT128: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 0;
pub const _GLIBCXX_CPU_DEFINES: u32 = 1;
pub const _GLIBCXX_FAST_MATH: u32 = 0;
pub const _GLIBCXX_USE_FLOAT128: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_LAUNDER: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED: u32 = 1;
pub const _GLIBCXX_HAVE_ACOSF: u32 = 1;
pub const _GLIBCXX_HAVE_ACOSL: u32 = 1;
pub const _GLIBCXX_HAVE_ALIGNED_ALLOC: u32 = 1;
pub const _GLIBCXX_HAVE_ARPA_INET_H: u32 = 1;
pub const _GLIBCXX_HAVE_ASINF: u32 = 1;
pub const _GLIBCXX_HAVE_ASINL: u32 = 1;
pub const _GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE: u32 = 1;
pub const _GLIBCXX_HAVE_ATAN2F: u32 = 1;
pub const _GLIBCXX_HAVE_ATAN2L: u32 = 1;
pub const _GLIBCXX_HAVE_ATANF: u32 = 1;
pub const _GLIBCXX_HAVE_ATANL: u32 = 1;
pub const _GLIBCXX_HAVE_ATOMIC_LOCK_POLICY: u32 = 1;
pub const _GLIBCXX_HAVE_AT_QUICK_EXIT: u32 = 1;
pub const _GLIBCXX_HAVE_CEILF: u32 = 1;
pub const _GLIBCXX_HAVE_CEILL: u32 = 1;
pub const _GLIBCXX_HAVE_COMPLEX_H: u32 = 1;
pub const _GLIBCXX_HAVE_COSF: u32 = 1;
pub const _GLIBCXX_HAVE_COSHF: u32 = 1;
pub const _GLIBCXX_HAVE_COSHL: u32 = 1;
pub const _GLIBCXX_HAVE_COSL: u32 = 1;
pub const _GLIBCXX_HAVE_DIRENT_H: u32 = 1;
pub const _GLIBCXX_HAVE_DLFCN_H: u32 = 1;
pub const _GLIBCXX_HAVE_EBADMSG: u32 = 1;
pub const _GLIBCXX_HAVE_ECANCELED: u32 = 1;
pub const _GLIBCXX_HAVE_ECHILD: u32 = 1;
pub const _GLIBCXX_HAVE_EIDRM: u32 = 1;
pub const _GLIBCXX_HAVE_ENDIAN_H: u32 = 1;
pub const _GLIBCXX_HAVE_ENODATA: u32 = 1;
pub const _GLIBCXX_HAVE_ENOLINK: u32 = 1;
pub const _GLIBCXX_HAVE_ENOSPC: u32 = 1;
pub const _GLIBCXX_HAVE_ENOSR: u32 = 1;
pub const _GLIBCXX_HAVE_ENOSTR: u32 = 1;
pub const _GLIBCXX_HAVE_ENOTRECOVERABLE: u32 = 1;
pub const _GLIBCXX_HAVE_ENOTSUP: u32 = 1;
pub const _GLIBCXX_HAVE_EOVERFLOW: u32 = 1;
pub const _GLIBCXX_HAVE_EOWNERDEAD: u32 = 1;
pub const _GLIBCXX_HAVE_EPERM: u32 = 1;
pub const _GLIBCXX_HAVE_EPROTO: u32 = 1;
pub const _GLIBCXX_HAVE_ETIME: u32 = 1;
pub const _GLIBCXX_HAVE_ETIMEDOUT: u32 = 1;
pub const _GLIBCXX_HAVE_ETXTBSY: u32 = 1;
pub const _GLIBCXX_HAVE_EWOULDBLOCK: u32 = 1;
pub const _GLIBCXX_HAVE_EXCEPTION_PTR_SINCE_GCC46: u32 = 1;
pub const _GLIBCXX_HAVE_EXECINFO_H: u32 = 1;
pub const _GLIBCXX_HAVE_EXPF: u32 = 1;
pub const _GLIBCXX_HAVE_EXPL: u32 = 1;
pub const _GLIBCXX_HAVE_FABSF: u32 = 1;
pub const _GLIBCXX_HAVE_FABSL: u32 = 1;
pub const _GLIBCXX_HAVE_FCNTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_FENV_H: u32 = 1;
pub const _GLIBCXX_HAVE_FINITE: u32 = 1;
pub const _GLIBCXX_HAVE_FINITEF: u32 = 1;
pub const _GLIBCXX_HAVE_FINITEL: u32 = 1;
pub const _GLIBCXX_HAVE_FLOAT_H: u32 = 1;
pub const _GLIBCXX_HAVE_FLOORF: u32 = 1;
pub const _GLIBCXX_HAVE_FLOORL: u32 = 1;
pub const _GLIBCXX_HAVE_FMODF: u32 = 1;
pub const _GLIBCXX_HAVE_FMODL: u32 = 1;
pub const _GLIBCXX_HAVE_FREXPF: u32 = 1;
pub const _GLIBCXX_HAVE_FREXPL: u32 = 1;
pub const _GLIBCXX_HAVE_GETIPINFO: u32 = 1;
pub const _GLIBCXX_HAVE_GETS: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOT: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOTF: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOTL: u32 = 1;
pub const _GLIBCXX_HAVE_ICONV: u32 = 1;
pub const _GLIBCXX_HAVE_INT64_T: u32 = 1;
pub const _GLIBCXX_HAVE_INT64_T_LONG: u32 = 1;
pub const _GLIBCXX_HAVE_INTTYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_ISINFF: u32 = 1;
pub const _GLIBCXX_HAVE_ISINFL: u32 = 1;
pub const _GLIBCXX_HAVE_ISNANF: u32 = 1;
pub const _GLIBCXX_HAVE_ISNANL: u32 = 1;
pub const _GLIBCXX_HAVE_ISWBLANK: u32 = 1;
pub const _GLIBCXX_HAVE_LC_MESSAGES: u32 = 1;
pub const _GLIBCXX_HAVE_LDEXPF: u32 = 1;
pub const _GLIBCXX_HAVE_LDEXPL: u32 = 1;
pub const _GLIBCXX_HAVE_LIBINTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_AS: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_DATA: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_FSIZE: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_RSS: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_VMEM: u32 = 0;
pub const _GLIBCXX_HAVE_LINK: u32 = 1;
pub const _GLIBCXX_HAVE_LINUX_FUTEX: u32 = 1;
pub const _GLIBCXX_HAVE_LINUX_RANDOM_H: u32 = 1;
pub const _GLIBCXX_HAVE_LINUX_TYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_LOCALE_H: u32 = 1;
pub const _GLIBCXX_HAVE_LOG10F: u32 = 1;
pub const _GLIBCXX_HAVE_LOG10L: u32 = 1;
pub const _GLIBCXX_HAVE_LOGF: u32 = 1;
pub const _GLIBCXX_HAVE_LOGL: u32 = 1;
pub const _GLIBCXX_HAVE_MBSTATE_T: u32 = 1;
pub const _GLIBCXX_HAVE_MEMALIGN: u32 = 1;
pub const _GLIBCXX_HAVE_MEMORY_H: u32 = 1;
pub const _GLIBCXX_HAVE_MODF: u32 = 1;
pub const _GLIBCXX_HAVE_MODFF: u32 = 1;
pub const _GLIBCXX_HAVE_MODFL: u32 = 1;
pub const _GLIBCXX_HAVE_NETDB_H: u32 = 1;
pub const _GLIBCXX_HAVE_NETINET_IN_H: u32 = 1;
pub const _GLIBCXX_HAVE_NETINET_TCP_H: u32 = 1;
pub const _GLIBCXX_HAVE_POLL: u32 = 1;
pub const _GLIBCXX_HAVE_POLL_H: u32 = 1;
pub const _GLIBCXX_HAVE_POSIX_MEMALIGN: u32 = 1;
pub const _GLIBCXX_HAVE_POWF: u32 = 1;
pub const _GLIBCXX_HAVE_POWL: u32 = 1;
pub const _GLIBCXX_HAVE_QUICK_EXIT: u32 = 1;
pub const _GLIBCXX_HAVE_READLINK: u32 = 1;
pub const _GLIBCXX_HAVE_SETENV: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOS: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOSF: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOSL: u32 = 1;
pub const _GLIBCXX_HAVE_SINF: u32 = 1;
pub const _GLIBCXX_HAVE_SINHF: u32 = 1;
pub const _GLIBCXX_HAVE_SINHL: u32 = 1;
pub const _GLIBCXX_HAVE_SINL: u32 = 1;
pub const _GLIBCXX_HAVE_SOCKATMARK: u32 = 1;
pub const _GLIBCXX_HAVE_SQRTF: u32 = 1;
pub const _GLIBCXX_HAVE_SQRTL: u32 = 1;
pub const _GLIBCXX_HAVE_STDALIGN_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDBOOL_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDINT_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDLIB_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRERROR_L: u32 = 1;
pub const _GLIBCXX_HAVE_STRERROR_R: u32 = 1;
pub const _GLIBCXX_HAVE_STRINGS_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRING_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRTOF: u32 = 1;
pub const _GLIBCXX_HAVE_STRTOLD: u32 = 1;
pub const _GLIBCXX_HAVE_STRUCT_DIRENT_D_TYPE: u32 = 1;
pub const _GLIBCXX_HAVE_STRXFRM_L: u32 = 1;
pub const _GLIBCXX_HAVE_SYMLINK: u32 = 1;
pub const _GLIBCXX_HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_IOCTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_IPC_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_PARAM_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_RESOURCE_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SDT_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SEM_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SOCKET_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_STATVFS_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_STAT_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SYSINFO_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_TIME_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_TYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_UIO_H: u32 = 1;
pub const _GLIBCXX_HAVE_S_ISREG: u32 = 1;
pub const _GLIBCXX_HAVE_TANF: u32 = 1;
pub const _GLIBCXX_HAVE_TANHF: u32 = 1;
pub const _GLIBCXX_HAVE_TANHL: u32 = 1;
pub const _GLIBCXX_HAVE_TANL: u32 = 1;
pub const _GLIBCXX_HAVE_TGMATH_H: u32 = 1;
pub const _GLIBCXX_HAVE_TIMESPEC_GET: u32 = 1;
pub const _GLIBCXX_HAVE_TLS: u32 = 1;
pub const _GLIBCXX_HAVE_TRUNCATE: u32 = 1;
pub const _GLIBCXX_HAVE_UCHAR_H: u32 = 1;
pub const _GLIBCXX_HAVE_UNISTD_H: u32 = 1;
pub const _GLIBCXX_HAVE_UTIME_H: u32 = 1;
pub const _GLIBCXX_HAVE_VFWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_VSWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_VWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_WCHAR_H: u32 = 1;
pub const _GLIBCXX_HAVE_WCSTOF: u32 = 1;
pub const _GLIBCXX_HAVE_WCTYPE_H: u32 = 1;
pub const _GLIBCXX_HAVE_WRITEV: u32 = 1;
pub const _GLIBCXX_HAVE___CXA_THREAD_ATEXIT_IMPL: u32 = 1;
pub const LT_OBJDIR: &'static [u8; 7usize] = b".libs/\0";
pub const _GLIBCXX_PACKAGE_BUGREPORT: &'static [u8; 1usize] = b"\0";
pub const _GLIBCXX_PACKAGE_NAME: &'static [u8; 15usize] = b"package-unused\0";
pub const _GLIBCXX_PACKAGE_STRING: &'static [u8; 30usize] = b"package-unused version-unused\0";
pub const _GLIBCXX_PACKAGE_TARNAME: &'static [u8; 10usize] = b"libstdc++\0";
pub const _GLIBCXX_PACKAGE_URL: &'static [u8; 1usize] = b"\0";
pub const _GLIBCXX_PACKAGE__GLIBCXX_VERSION: &'static [u8; 15usize] = b"version-unused\0";
pub const STDC_HEADERS: u32 = 1;
pub const _GLIBCXX_DARWIN_USE_64_BIT_INODE: u32 = 1;
pub const _GLIBCXX11_USE_C99_COMPLEX: u32 = 1;
pub const _GLIBCXX11_USE_C99_MATH: u32 = 1;
pub const _GLIBCXX11_USE_C99_STDIO: u32 = 1;
pub const _GLIBCXX11_USE_C99_STDLIB: u32 = 1;
pub const _GLIBCXX11_USE_C99_WCHAR: u32 = 1;
pub const _GLIBCXX98_USE_C99_COMPLEX: u32 = 1;
pub const _GLIBCXX98_USE_C99_MATH: u32 = 1;
pub const _GLIBCXX98_USE_C99_STDIO: u32 = 1;
pub const _GLIBCXX98_USE_C99_STDLIB: u32 = 1;
pub const _GLIBCXX98_USE_C99_WCHAR: u32 = 1;
pub const _GLIBCXX_ATOMIC_BUILTINS: u32 = 1;
pub const _GLIBCXX_FULLY_DYNAMIC_STRING: u32 = 0;
pub const _GLIBCXX_HAS_GTHREADS: u32 = 1;
pub const _GLIBCXX_HOSTED: u32 = 1;
pub const _GLIBCXX_RES_LIMITS: u32 = 1;
pub const _GLIBCXX_STDIO_EOF: i32 = -1;
pub const _GLIBCXX_STDIO_SEEK_CUR: u32 = 1;
pub const _GLIBCXX_STDIO_SEEK_END: u32 = 2;
pub const _GLIBCXX_SYMVER: u32 = 1;
pub const _GLIBCXX_SYMVER_GNU: u32 = 1;
pub const _GLIBCXX_USE_C11_UCHAR_CXX11: u32 = 1;
pub const _GLIBCXX_USE_C99: u32 = 1;
pub const _GLIBCXX_USE_C99_COMPLEX_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_CTYPE_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_FENV_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_INTTYPES_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_MATH_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_STDINT_TR1: u32 = 1;
pub const _GLIBCXX_USE_CLOCK_MONOTONIC: u32 = 1;
pub const _GLIBCXX_USE_CLOCK_REALTIME: u32 = 1;
pub const _GLIBCXX_USE_DECIMAL_FLOAT: u32 = 1;
pub const _GLIBCXX_USE_DEV_RANDOM: u32 = 1;
pub const _GLIBCXX_USE_FCHMOD: u32 = 1;
pub const _GLIBCXX_USE_FCHMODAT: u32 = 1;
pub const _GLIBCXX_USE_GETTIMEOFDAY: u32 = 1;
pub const _GLIBCXX_USE_GET_NPROCS: u32 = 1;
pub const _GLIBCXX_USE_INT128: u32 = 1;
pub const _GLIBCXX_USE_LFS: u32 = 1;
pub const _GLIBCXX_USE_LONG_LONG: u32 = 1;
pub const _GLIBCXX_USE_LSTAT: u32 = 1;
pub const _GLIBCXX_USE_NANOSLEEP: u32 = 1;
pub const _GLIBCXX_USE_NLS: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_COND_CLOCKWAIT: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_MUTEX_CLOCKLOCK: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_RWLOCK_CLOCKLOCK: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_RWLOCK_T: u32 = 1;
pub const _GLIBCXX_USE_RANDOM_TR1: u32 = 1;
pub const _GLIBCXX_USE_REALPATH: u32 = 1;
pub const _GLIBCXX_USE_SCHED_YIELD: u32 = 1;
pub const _GLIBCXX_USE_SC_NPROCESSORS_ONLN: u32 = 1;
pub const _GLIBCXX_USE_SENDFILE: u32 = 1;
pub const _GLIBCXX_USE_ST_MTIM: u32 = 1;
pub const _GLIBCXX_USE_TMPNAM: u32 = 1;
pub const _GLIBCXX_USE_UTIME: u32 = 1;
pub const _GLIBCXX_USE_UTIMENSAT: u32 = 1;
pub const _GLIBCXX_USE_WCHAR_T: u32 = 1;
pub const _GLIBCXX_VERBOSE: u32 = 1;
pub const _GLIBCXX_X86_RDRAND: u32 = 1;
pub const _GLIBCXX_X86_RDSEED: u32 = 1;
pub const _GTHREAD_USE_MUTEX_TIMEDLOCK: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const INT8_WIDTH: u32 = 8;
pub const UINT8_WIDTH: u32 = 8;
pub const INT16_WIDTH: u32 = 16;
pub const UINT16_WIDTH: u32 = 16;
pub const INT32_WIDTH: u32 = 32;
pub const UINT32_WIDTH: u32 = 32;
pub const INT64_WIDTH: u32 = 64;
pub const UINT64_WIDTH: u32 = 64;
pub const INT_LEAST8_WIDTH: u32 = 8;
pub const UINT_LEAST8_WIDTH: u32 = 8;
pub const INT_LEAST16_WIDTH: u32 = 16;
pub const UINT_LEAST16_WIDTH: u32 = 16;
pub const INT_LEAST32_WIDTH: u32 = 32;
pub const UINT_LEAST32_WIDTH: u32 = 32;
pub const INT_LEAST64_WIDTH: u32 = 64;
pub const UINT_LEAST64_WIDTH: u32 = 64;
pub const INT_FAST8_WIDTH: u32 = 8;
pub const UINT_FAST8_WIDTH: u32 = 8;
pub const INT_FAST16_WIDTH: u32 = 64;
pub const UINT_FAST16_WIDTH: u32 = 64;
pub const INT_FAST32_WIDTH: u32 = 64;
pub const UINT_FAST32_WIDTH: u32 = 64;
pub const INT_FAST64_WIDTH: u32 = 64;
pub const UINT_FAST64_WIDTH: u32 = 64;
pub const INTPTR_WIDTH: u32 = 64;
pub const UINTPTR_WIDTH: u32 = 64;
pub const INTMAX_WIDTH: u32 = 64;
pub const UINTMAX_WIDTH: u32 = 64;
pub const PTRDIFF_WIDTH: u32 = 64;
pub const SIG_ATOMIC_WIDTH: u32 = 32;
pub const SIZE_WIDTH: u32 = 64;
pub const WCHAR_WIDTH: u32 = 32;
pub const WINT_WIDTH: u32 = 32;
pub const MAX_FRAME_PAYLOAD_SIZE: u32 = 128;
pub const SBX_LIGHT_SENSOR_SAMPLES: u32 = 6;
pub const SBX_LIGHT_SENSOR_CHANNELS: u32 = 4;
pub const SBX_BME280_DIG88_SIZE: u32 = 26;
pub const SBX_BME280_DIGE1_SIZE: u32 = 7;
pub const SBX_BME280_READOUT_SIZE: u32 = 8;
pub const SBX_NOISE_SAMPLES: u32 = 12;
pub type std_size_t = ::std::os::raw::c_ulong;
pub type std_nullptr_t = *const ::std::os::raw::c_void;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
impl sbx_msg_type {
    pub const PING: sbx_msg_type = sbx_msg_type(1);
}
impl sbx_msg_type {
    pub const HELLO: sbx_msg_type = sbx_msg_type(128);
}
impl sbx_msg_type {
    pub const PONG: sbx_msg_type = sbx_msg_type(129);
}
impl sbx_msg_type {
    pub const STATUS: sbx_msg_type = sbx_msg_type(130);
}
impl sbx_msg_type {
    pub const SENSOR_DS18B20: sbx_msg_type = sbx_msg_type(241);
}
impl sbx_msg_type {
    pub const SENSOR_NOISE: sbx_msg_type = sbx_msg_type(242);
}
impl sbx_msg_type {
    pub const SENSOR_DHT: sbx_msg_type = sbx_msg_type(243);
}
impl sbx_msg_type {
    pub const SENSOR_LIGHT: sbx_msg_type = sbx_msg_type(244);
}
impl sbx_msg_type {
    pub const SENSOR_BME280: sbx_msg_type = sbx_msg_type(245);
}
impl sbx_msg_type {
    pub const SENSOR_STREAM_ACCEL_X: sbx_msg_type = sbx_msg_type(248);
}
impl sbx_msg_type {
    pub const SENSOR_STREAM_ACCEL_Y: sbx_msg_type = sbx_msg_type(249);
}
impl sbx_msg_type {
    pub const SENSOR_STREAM_ACCEL_Z: sbx_msg_type = sbx_msg_type(250);
}
impl sbx_msg_type {
    pub const SENSOR_STREAM_COMPASS_X: sbx_msg_type = sbx_msg_type(251);
}
impl sbx_msg_type {
    pub const SENSOR_STREAM_COMPASS_Y: sbx_msg_type = sbx_msg_type(252);
}
impl sbx_msg_type {
    pub const SENSOR_STREAM_COMPASS_Z: sbx_msg_type = sbx_msg_type(253);
}
impl sbx_msg_type {
    pub const RESERVED: sbx_msg_type = sbx_msg_type(255);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct sbx_msg_type(pub u8);
impl sbx_cpu_context_id {
    pub const CPU_IDLE: sbx_cpu_context_id = sbx_cpu_context_id(0);
}
impl sbx_cpu_context_id {
    pub const CPU_INTR_USART1: sbx_cpu_context_id = sbx_cpu_context_id(1);
}
impl sbx_cpu_context_id {
    pub const CPU_INTR_USART2: sbx_cpu_context_id = sbx_cpu_context_id(2);
}
impl sbx_cpu_context_id {
    pub const CPU_INTR_USART3: sbx_cpu_context_id = sbx_cpu_context_id(3);
}
impl sbx_cpu_context_id {
    pub const CPU_INTR_I2C1: sbx_cpu_context_id = sbx_cpu_context_id(4);
}
impl sbx_cpu_context_id {
    pub const CPU_INTR_I2C2: sbx_cpu_context_id = sbx_cpu_context_id(5);
}
impl sbx_cpu_context_id {
    pub const CPU_INTR_ADC: sbx_cpu_context_id = sbx_cpu_context_id(6);
}
impl sbx_cpu_context_id {
    pub const CPU_SCHED: sbx_cpu_context_id = sbx_cpu_context_id(8);
}
impl sbx_cpu_context_id {
    pub const CPU_INTR_USART1_DMA: sbx_cpu_context_id = sbx_cpu_context_id(9);
}
impl sbx_cpu_context_id {
    pub const CPU_INTR_USART2_DMA: sbx_cpu_context_id = sbx_cpu_context_id(10);
}
impl sbx_cpu_context_id {
    pub const CPU_INTR_USART3_DMA: sbx_cpu_context_id = sbx_cpu_context_id(11);
}
impl sbx_cpu_context_id {
    pub const CPU_INTR_I2C1_DMA: sbx_cpu_context_id = sbx_cpu_context_id(12);
}
impl sbx_cpu_context_id {
    pub const CPU_INTR_I2C2_DMA: sbx_cpu_context_id = sbx_cpu_context_id(13);
}
impl sbx_cpu_context_id {
    pub const CPU_INTR_ADC_DMA: sbx_cpu_context_id = sbx_cpu_context_id(14);
}
impl sbx_cpu_context_id {
    pub const CPU_TASK_BASE: sbx_cpu_context_id = sbx_cpu_context_id(16);
}
impl sbx_cpu_context_id {
    pub const CPU_TASK_MAX: sbx_cpu_context_id = sbx_cpu_context_id(31);
}
#[repr(transparent)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct sbx_cpu_context_id(pub u8);
pub type sbx_uptime_t = u16;
pub type sbx_rtc_t = u32;
#[repr(C, packed)]
#[derive(Debug, Default)]
pub struct sbx_msg_sensor_stream_t {
    #[doc = " \"Sequence number\" to be able to identify short packet loss."]
    pub seq: u16,
    #[doc = " Average sample value."]
    pub average: u16,
    #[doc = " Coded samples."]
    pub data: __IncompleteArrayField<u8>,
}
#[test]
fn bindgen_test_layout_sbx_msg_sensor_stream_t() {
    assert_eq!(
        ::std::mem::size_of::<sbx_msg_sensor_stream_t>(),
        4usize,
        concat!("Size of: ", stringify!(sbx_msg_sensor_stream_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sbx_msg_sensor_stream_t>(),
        1usize,
        concat!("Alignment of ", stringify!(sbx_msg_sensor_stream_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sbx_msg_sensor_stream_t>())).seq as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sbx_msg_sensor_stream_t),
            "::",
            stringify!(seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sbx_msg_sensor_stream_t>())).average as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sbx_msg_sensor_stream_t),
            "::",
            stringify!(average)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sbx_msg_sensor_stream_t>())).data as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sbx_msg_sensor_stream_t),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sbx_msg_ds18b20_sample_t {
    #[doc = " DS18B20 sensor ID"]
    pub id: [u8; 8usize],
    #[doc = " Raw 16 bit sensor value"]
    pub raw_value: u16,
}
#[test]
fn bindgen_test_layout_sbx_msg_ds18b20_sample_t() {
    assert_eq!(
        ::std::mem::size_of::<sbx_msg_ds18b20_sample_t>(),
        10usize,
        concat!("Size of: ", stringify!(sbx_msg_ds18b20_sample_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sbx_msg_ds18b20_sample_t>(),
        1usize,
        concat!("Alignment of ", stringify!(sbx_msg_ds18b20_sample_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sbx_msg_ds18b20_sample_t>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sbx_msg_ds18b20_sample_t),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sbx_msg_ds18b20_sample_t>())).raw_value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sbx_msg_ds18b20_sample_t),
            "::",
            stringify!(raw_value)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sbx_msg_ds18b20_t {
    #[doc = " Milliseconds since boot."]
    #[doc = ""]
    #[doc = " Wraps around every ~65 seconds or so. Since all sensors are sampled"]
    #[doc = " more often than that, wraparound can be compensated for."]
    pub timestamp: sbx_uptime_t,
    pub samples: [sbx_msg_ds18b20_sample_t; 12usize],
}
#[test]
fn bindgen_test_layout_sbx_msg_ds18b20_t() {
    assert_eq!(
        ::std::mem::size_of::<sbx_msg_ds18b20_t>(),
        122usize,
        concat!("Size of: ", stringify!(sbx_msg_ds18b20_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sbx_msg_ds18b20_t>(),
        1usize,
        concat!("Alignment of ", stringify!(sbx_msg_ds18b20_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sbx_msg_ds18b20_t>())).timestamp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sbx_msg_ds18b20_t),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sbx_msg_ds18b20_t>())).samples as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sbx_msg_ds18b20_t),
            "::",
            stringify!(samples)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sbx_msg_noise_sample_t {
    #[doc = " Timestamp of the sample."]
    pub timestamp: sbx_uptime_t,
    #[doc = " Average of square samples in window."]
    pub sqavg: u32,
    pub min: i16,
    pub max: i16,
}
#[test]
fn bindgen_test_layout_sbx_msg_noise_sample_t() {
    assert_eq!(
        ::std::mem::size_of::<sbx_msg_noise_sample_t>(),
        10usize,
        concat!("Size of: ", stringify!(sbx_msg_noise_sample_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sbx_msg_noise_sample_t>(),
        1usize,
        concat!("Alignment of ", stringify!(sbx_msg_noise_sample_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sbx_msg_noise_sample_t>())).timestamp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sbx_msg_noise_sample_t),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sbx_msg_noise_sample_t>())).sqavg as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sbx_msg_noise_sample_t),
            "::",
            stringify!(sqavg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sbx_msg_noise_sample_t>())).min as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(sbx_msg_noise_sample_t),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sbx_msg_noise_sample_t>())).max as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sbx_msg_noise_sample_t),
            "::",
            stringify!(max)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sbx_msg_noise_t {
    pub factor: u8,
    pub samples: [sbx_msg_noise_sample_t; 12usize],
}
#[test]
fn bindgen_test_layout_sbx_msg_noise_t() {
    assert_eq!(
        ::std::mem::size_of::<sbx_msg_noise_t>(),
        121usize,
        concat!("Size of: ", stringify!(sbx_msg_noise_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sbx_msg_noise_t>(),
        1usize,
        concat!("Alignment of ", stringify!(sbx_msg_noise_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sbx_msg_noise_t>())).factor as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sbx_msg_noise_t),
            "::",
            stringify!(factor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sbx_msg_noise_t>())).samples as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(sbx_msg_noise_t),
            "::",
            stringify!(samples)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sbx_msg_light_sample_t {
    #[doc = " Timestamp at which the first channel was sampled."]
    #[doc = ""]
    #[doc = " The channels are sampled in undefined order with an interval of 200ms."]
    pub timestamp: sbx_uptime_t,
    #[doc = " Data for each of the four channels, in order: Red, Green, Blue, Clear."]
    pub ch: [u16; 4usize],
}
#[test]
fn bindgen_test_layout_sbx_msg_light_sample_t() {
    assert_eq!(
        ::std::mem::size_of::<sbx_msg_light_sample_t>(),
        10usize,
        concat!("Size of: ", stringify!(sbx_msg_light_sample_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sbx_msg_light_sample_t>(),
        1usize,
        concat!("Alignment of ", stringify!(sbx_msg_light_sample_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sbx_msg_light_sample_t>())).timestamp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sbx_msg_light_sample_t),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sbx_msg_light_sample_t>())).ch as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sbx_msg_light_sample_t),
            "::",
            stringify!(ch)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sbx_msg_light_t {
    #[doc = " Array containing the samples."]
    #[doc = ""]
    #[doc = " Six samples are safe even with encryption and provide a reasonable update"]
    #[doc = " interval."]
    pub samples: [sbx_msg_light_sample_t; 6usize],
}
#[test]
fn bindgen_test_layout_sbx_msg_light_t() {
    assert_eq!(
        ::std::mem::size_of::<sbx_msg_light_t>(),
        60usize,
        concat!("Size of: ", stringify!(sbx_msg_light_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sbx_msg_light_t>(),
        1usize,
        concat!("Alignment of ", stringify!(sbx_msg_light_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sbx_msg_light_t>())).samples as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sbx_msg_light_t),
            "::",
            stringify!(samples)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sbx_msg_hello_t {
    pub rtc: sbx_rtc_t,
    pub uptime: sbx_uptime_t,
}
#[test]
fn bindgen_test_layout_sbx_msg_hello_t() {
    assert_eq!(
        ::std::mem::size_of::<sbx_msg_hello_t>(),
        6usize,
        concat!("Size of: ", stringify!(sbx_msg_hello_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sbx_msg_hello_t>(),
        1usize,
        concat!("Alignment of ", stringify!(sbx_msg_hello_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sbx_msg_hello_t>())).rtc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sbx_msg_hello_t),
            "::",
            stringify!(rtc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sbx_msg_hello_t>())).uptime as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sbx_msg_hello_t),
            "::",
            stringify!(uptime)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sbx_msg_status_t {
    pub rtc: sbx_rtc_t,
    pub uptime: sbx_uptime_t,
    #[doc = " Core protocol version number."]
    pub protocol_version: u8,
    #[doc = " Status version number."]
    pub status_version: u8,
    pub imu: sbx_msg_status_t__bindgen_ty_1,
    pub i2c_metrics: [sbx_msg_status_t__bindgen_ty_2; 2usize],
    pub bme280_metrics: [sbx_msg_status_t__bindgen_ty_3; 2usize],
    pub tx: sbx_msg_status_t__bindgen_ty_4,
    pub cpu_samples: [u16; 32usize],
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sbx_msg_status_t__bindgen_ty_1 {
    pub stream_state: [sbx_msg_status_t__bindgen_ty_1__bindgen_ty_1; 2usize],
}
#[doc = " Current sequence numbers for the Accelerometer and Magnetometer sensor"]
#[doc = " streams."]
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sbx_msg_status_t__bindgen_ty_1__bindgen_ty_1 {
    pub sequence_number: u16,
    pub timestamp: u16,
    pub period: u16,
}
#[test]
fn bindgen_test_layout_sbx_msg_status_t__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<sbx_msg_status_t__bindgen_ty_1__bindgen_ty_1>(),
        6usize,
        concat!(
            "Size of: ",
            stringify!(sbx_msg_status_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<sbx_msg_status_t__bindgen_ty_1__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(sbx_msg_status_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sbx_msg_status_t__bindgen_ty_1__bindgen_ty_1>()))
                .sequence_number as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sbx_msg_status_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(sequence_number)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sbx_msg_status_t__bindgen_ty_1__bindgen_ty_1>()))
                .timestamp as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sbx_msg_status_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sbx_msg_status_t__bindgen_ty_1__bindgen_ty_1>())).period as
                *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sbx_msg_status_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(period)
        )
    );
}
#[test]
fn bindgen_test_layout_sbx_msg_status_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<sbx_msg_status_t__bindgen_ty_1>(),
        12usize,
        concat!("Size of: ", stringify!(sbx_msg_status_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<sbx_msg_status_t__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(sbx_msg_status_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sbx_msg_status_t__bindgen_ty_1>())).stream_state as *const _ as
                usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sbx_msg_status_t__bindgen_ty_1),
            "::",
            stringify!(stream_state)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sbx_msg_status_t__bindgen_ty_2 {
    pub transaction_overruns: u16,
}
#[test]
fn bindgen_test_layout_sbx_msg_status_t__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<sbx_msg_status_t__bindgen_ty_2>(),
        2usize,
        concat!("Size of: ", stringify!(sbx_msg_status_t__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<sbx_msg_status_t__bindgen_ty_2>(),
        1usize,
        concat!("Alignment of ", stringify!(sbx_msg_status_t__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sbx_msg_status_t__bindgen_ty_2>())).transaction_overruns as
                *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sbx_msg_status_t__bindgen_ty_2),
            "::",
            stringify!(transaction_overruns)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sbx_msg_status_t__bindgen_ty_3 {
    pub configure_status: u8,
    pub timeouts: u16,
}
#[test]
fn bindgen_test_layout_sbx_msg_status_t__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<sbx_msg_status_t__bindgen_ty_3>(),
        3usize,
        concat!("Size of: ", stringify!(sbx_msg_status_t__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<sbx_msg_status_t__bindgen_ty_3>(),
        1usize,
        concat!("Alignment of ", stringify!(sbx_msg_status_t__bindgen_ty_3))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sbx_msg_status_t__bindgen_ty_3>())).configure_status as
                *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sbx_msg_status_t__bindgen_ty_3),
            "::",
            stringify!(configure_status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sbx_msg_status_t__bindgen_ty_3>())).timeouts as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(sbx_msg_status_t__bindgen_ty_3),
            "::",
            stringify!(timeouts)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sbx_msg_status_t__bindgen_ty_4 {
    pub buffers: sbx_msg_status_t__bindgen_ty_4__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sbx_msg_status_t__bindgen_ty_4__bindgen_ty_1 {
    pub most_allocated: u16,
    pub allocated: u16,
    pub ready: u16,
    pub total: u16,
}
#[test]
fn bindgen_test_layout_sbx_msg_status_t__bindgen_ty_4__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<sbx_msg_status_t__bindgen_ty_4__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(sbx_msg_status_t__bindgen_ty_4__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<sbx_msg_status_t__bindgen_ty_4__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(sbx_msg_status_t__bindgen_ty_4__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sbx_msg_status_t__bindgen_ty_4__bindgen_ty_1>()))
                .most_allocated as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sbx_msg_status_t__bindgen_ty_4__bindgen_ty_1),
            "::",
            stringify!(most_allocated)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sbx_msg_status_t__bindgen_ty_4__bindgen_ty_1>()))
                .allocated as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sbx_msg_status_t__bindgen_ty_4__bindgen_ty_1),
            "::",
            stringify!(allocated)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sbx_msg_status_t__bindgen_ty_4__bindgen_ty_1>())).ready as
                *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sbx_msg_status_t__bindgen_ty_4__bindgen_ty_1),
            "::",
            stringify!(ready)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sbx_msg_status_t__bindgen_ty_4__bindgen_ty_1>())).total as
                *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(sbx_msg_status_t__bindgen_ty_4__bindgen_ty_1),
            "::",
            stringify!(total)
        )
    );
}
#[test]
fn bindgen_test_layout_sbx_msg_status_t__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<sbx_msg_status_t__bindgen_ty_4>(),
        8usize,
        concat!("Size of: ", stringify!(sbx_msg_status_t__bindgen_ty_4))
    );
    assert_eq!(
        ::std::mem::align_of::<sbx_msg_status_t__bindgen_ty_4>(),
        1usize,
        concat!("Alignment of ", stringify!(sbx_msg_status_t__bindgen_ty_4))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sbx_msg_status_t__bindgen_ty_4>())).buffers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sbx_msg_status_t__bindgen_ty_4),
            "::",
            stringify!(buffers)
        )
    );
}
#[test]
fn bindgen_test_layout_sbx_msg_status_t() {
    assert_eq!(
        ::std::mem::size_of::<sbx_msg_status_t>(),
        102usize,
        concat!("Size of: ", stringify!(sbx_msg_status_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sbx_msg_status_t>(),
        1usize,
        concat!("Alignment of ", stringify!(sbx_msg_status_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sbx_msg_status_t>())).rtc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sbx_msg_status_t),
            "::",
            stringify!(rtc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sbx_msg_status_t>())).uptime as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sbx_msg_status_t),
            "::",
            stringify!(uptime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sbx_msg_status_t>())).protocol_version as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(sbx_msg_status_t),
            "::",
            stringify!(protocol_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sbx_msg_status_t>())).status_version as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(sbx_msg_status_t),
            "::",
            stringify!(status_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sbx_msg_status_t>())).imu as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sbx_msg_status_t),
            "::",
            stringify!(imu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sbx_msg_status_t>())).i2c_metrics as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sbx_msg_status_t),
            "::",
            stringify!(i2c_metrics)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sbx_msg_status_t>())).bme280_metrics as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sbx_msg_status_t),
            "::",
            stringify!(bme280_metrics)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sbx_msg_status_t>())).tx as *const _ as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(sbx_msg_status_t),
            "::",
            stringify!(tx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sbx_msg_status_t>())).cpu_samples as *const _ as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(sbx_msg_status_t),
            "::",
            stringify!(cpu_samples)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sbx_msg_dht11_t {
    pub timestamp: sbx_uptime_t,
    pub humidity: u16,
    pub temperature: u16,
}
#[test]
fn bindgen_test_layout_sbx_msg_dht11_t() {
    assert_eq!(
        ::std::mem::size_of::<sbx_msg_dht11_t>(),
        6usize,
        concat!("Size of: ", stringify!(sbx_msg_dht11_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sbx_msg_dht11_t>(),
        1usize,
        concat!("Alignment of ", stringify!(sbx_msg_dht11_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sbx_msg_dht11_t>())).timestamp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sbx_msg_dht11_t),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sbx_msg_dht11_t>())).humidity as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sbx_msg_dht11_t),
            "::",
            stringify!(humidity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sbx_msg_dht11_t>())).temperature as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sbx_msg_dht11_t),
            "::",
            stringify!(temperature)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sbx_msg_bme280_t {
    pub timestamp: sbx_uptime_t,
    pub instance: u8,
    pub dig88: [u8; 26usize],
    pub dige1: [u8; 7usize],
    pub readout: [u8; 8usize],
}
#[test]
fn bindgen_test_layout_sbx_msg_bme280_t() {
    assert_eq!(
        ::std::mem::size_of::<sbx_msg_bme280_t>(),
        44usize,
        concat!("Size of: ", stringify!(sbx_msg_bme280_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sbx_msg_bme280_t>(),
        1usize,
        concat!("Alignment of ", stringify!(sbx_msg_bme280_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sbx_msg_bme280_t>())).timestamp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sbx_msg_bme280_t),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sbx_msg_bme280_t>())).instance as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sbx_msg_bme280_t),
            "::",
            stringify!(instance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sbx_msg_bme280_t>())).dig88 as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(sbx_msg_bme280_t),
            "::",
            stringify!(dig88)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sbx_msg_bme280_t>())).dige1 as *const _ as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(sbx_msg_bme280_t),
            "::",
            stringify!(dige1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sbx_msg_bme280_t>())).readout as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sbx_msg_bme280_t),
            "::",
            stringify!(readout)
        )
    );
}
#[repr(C, packed)]
pub struct _sbx_msg_payload_t {
    pub hello: __BindgenUnionField<sbx_msg_hello_t>,
    pub status: __BindgenUnionField<sbx_msg_status_t>,
    pub sensor_stream: __BindgenUnionField<sbx_msg_sensor_stream_t>,
    pub ds18b20: __BindgenUnionField<sbx_msg_ds18b20_t>,
    pub dht11: __BindgenUnionField<sbx_msg_dht11_t>,
    pub noise: __BindgenUnionField<sbx_msg_noise_t>,
    pub light: __BindgenUnionField<sbx_msg_light_t>,
    pub bme280: __BindgenUnionField<sbx_msg_bme280_t>,
    pub bindgen_union_field: [u8; 122usize],
}
#[test]
fn bindgen_test_layout__sbx_msg_payload_t() {
    assert_eq!(
        ::std::mem::size_of::<_sbx_msg_payload_t>(),
        122usize,
        concat!("Size of: ", stringify!(_sbx_msg_payload_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_sbx_msg_payload_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_sbx_msg_payload_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sbx_msg_payload_t>())).hello as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_sbx_msg_payload_t),
            "::",
            stringify!(hello)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sbx_msg_payload_t>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_sbx_msg_payload_t),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sbx_msg_payload_t>())).sensor_stream as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_sbx_msg_payload_t),
            "::",
            stringify!(sensor_stream)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sbx_msg_payload_t>())).ds18b20 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_sbx_msg_payload_t),
            "::",
            stringify!(ds18b20)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sbx_msg_payload_t>())).dht11 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_sbx_msg_payload_t),
            "::",
            stringify!(dht11)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sbx_msg_payload_t>())).noise as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_sbx_msg_payload_t),
            "::",
            stringify!(noise)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sbx_msg_payload_t>())).light as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_sbx_msg_payload_t),
            "::",
            stringify!(light)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sbx_msg_payload_t>())).bme280 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_sbx_msg_payload_t),
            "::",
            stringify!(bme280)
        )
    );
}
impl Default for _sbx_msg_payload_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C, packed)]
pub struct sbx_msg_t {
    pub type_: sbx_msg_type,
    pub payload: _sbx_msg_payload_t,
}
#[test]
fn bindgen_test_layout_sbx_msg_t() {
    assert_eq!(
        ::std::mem::size_of::<sbx_msg_t>(),
        123usize,
        concat!("Size of: ", stringify!(sbx_msg_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sbx_msg_t>(),
        1usize,
        concat!("Alignment of ", stringify!(sbx_msg_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sbx_msg_t>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sbx_msg_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sbx_msg_t>())).payload as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(sbx_msg_t),
            "::",
            stringify!(payload)
        )
    );
}
impl Default for sbx_msg_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const SENSOR_STREAM_MAX_PAYLOAD_SIZE: std_size_t = 127;
pub const SENSOR_STREAM_MAX_ENCODED_SAMPLE_BYTES: std_size_t = 123;
pub const SENSOR_STREAM_MAX_SAMPLES: std_size_t = 109;
pub const SENSOR_STREAM_MAX_BITMAP_SIZE: std_size_t = 14;
